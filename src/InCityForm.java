/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InCityForm.java
 *
 * Created on 6-Mar-2012, 9:51:34 PM
 */
/**
 *
 * @author sadnana
 */
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.query.ResultSetFactory;
import com.hp.hpl.jena.query.ResultSetFormatter;
import com.hp.hpl.jena.query.Syntax;
import com.hp.hpl.jena.rdf.model.Literal;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.Resource;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;

public class InCityForm extends javax.swing.JFrame {

    //sparql endpoint
    final static String serviceEndpoint = "http://linkedgeodata.org/sparql";
    //map to hold citynames and their latiutde and longitude
    static Map<String, double[]> res = new HashMap<String, double[]>();
    /** Creates new form InCityForm */
    public InCityForm() {
        initComponents();

        jComboBoxCity.setModel(dcm);

        //load all the cities
        for(String elem : res.keySet()  )
            dcm.addElement(elem);

        System.out.println("All cities loaded");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxCity = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBoxCity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("City Name");

        jButton1.setText("Show Properties");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxCity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jButton1)
                .addContainerGap(380, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(279, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        String citySelect = jComboBoxCity.getSelectedItem().toString();
        System.out.println(citySelect);
        double cityLat = 0.0;
        double cityLong = 0.0;
        //radius around specific location
        double radius = 5;
        for(Map.Entry<String, double[]> entry : res.entrySet()){
            String a = entry.getKey();
            double[] b = entry.getValue();
            if(a.equalsIgnoreCase(citySelect)){
                cityLat = b[0];
                cityLong = b[1];
            }
                
        }
        
        //sparql query st_intersect takes point(longitude, latitude) in that order
        String querySchool =
        "PREFIX lgdo: <http://linkedgeodata.org/ontology/>" +
        "PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>" +
        "PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>" +
        "SELECT ?schoolname ?schoolgeo "+
        "FROM <http://linkedgeodata.org> WHERE {" +
        "?school     a            lgdo:School ." +
        "?school     geo:geometry ?schoolgeo ." +
        "?school     rdfs:label   ?schoolname ." +
        "FILTER(<bif:st_intersects> (?schoolgeo, <bif:st_point> ("+ cityLong +","+ cityLat + ")," + radius + ")) " +
        "}";
        
        Query query = QueryFactory.create(querySchool, Syntax.syntaxARQ);
        QueryExecution qe = QueryExecutionFactory.sparqlService(serviceEndpoint, query);
        
        try{
            ResultSet rs = qe.execSelect();

            while(rs.hasNext()){
                //get each line from result set
                QuerySolution qs = rs.nextSolution();

                //get the nodes
                RDFNode schoolname = qs.get("schoolname");
                RDFNode schoolgeo = qs.get("schoolgeo");
                

                //convert to appropriate datatype
                //String schoolName = ((Literal)schoolname).getString();
                //double schoolGeo = ((Literal)schoolgeo).getDouble();

                //res.put(city, new double[]{lat, lon});

                System.out.println(schoolname +" : " + schoolgeo);


            }

        }catch(Exception e){
            System.out.println(e.getMessage());
        }
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InCityForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InCityForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InCityForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InCityForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /**
         * gets the all the city names and their locations
         */
    for(int i = 0 ; i < 1000; i+=1000){
        String linkedGeoQueryString =
            "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> " +
            "PREFIX dbpedia: <http://dbpedia.org/ontology/> " +
            "PREFIX lgdo: <http://linkedgeodata.org/ontology/>" +
            "PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>" +
            "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> " +
            "SELECT distinct ?cityname ?lat ?long WHERE {" +
            "           ?class rdf:type lgdo:City. " +
            "           ?member     a      lgdo:City; " +
            "                   rdfs:label ?cityname; " +
            "                   geo:lat ?lat; " +
            "                   geo:long ?long. " +
            "           FILTER(lang(?cityname)=\"\") . " +
            "   } LIMIT 10 OFFSET 0";

        Query query = QueryFactory.create(linkedGeoQueryString, Syntax.syntaxARQ);
        QueryExecution qe= QueryExecutionFactory.sparqlService(serviceEndpoint, query);


        try{
            ResultSet rs = qe.execSelect();

            while(rs.hasNext()){
                //get each line from result set
                QuerySolution qs = rs.nextSolution();

                //get the nodes
                RDFNode cityName = qs.get("cityname");
                RDFNode latitude = qs.get("lat");
                RDFNode longitude = qs.get("long");

                //convert to appropriate datatype
                String city = ((Literal)cityName).getString();
                double lat = ((Literal)latitude).getDouble();
                double lon = ((Literal)longitude).getDouble();

                res.put(city, new double[]{lat, lon});

                System.out.println(city +" : " + lat + " : " + lon);


            }

        }catch(Exception e){
            System.out.println(e.getMessage());
        }

       
    }//for ends here
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new InCityForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBoxCity;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    DefaultComboBoxModel dcm = new DefaultComboBoxModel();




}
